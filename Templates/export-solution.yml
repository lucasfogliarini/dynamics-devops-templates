parameters:
# Tasks flags
- name: MergeSolutionBeforeExport
  type: boolean
  default: true
- name: CheckSolutionComponentTypes
  type: boolean
  default: false
- name: AllowedSolutionComponentTypes
  type: string
- name: CheckSolutionNamePattern
  type: boolean
  default: false
- name: CheckTableBehavior
  type: boolean
  default: true
- name: CheckEnvironmentVariables
  type: boolean
  default: false
- name: CheckConnectionReferences
  type: boolean
  default: false
- name: ApprovalType
  type: string
  values:
    - PullRequest
    - Simple
  default: PullRequest
  
  # Settings
- name: SolutionName
  type: string
- name: DevServiceConnectionName
  type: string
- name: DevServiceConnectionURL
  type: string
- name: ApprovedSolutionNames
  type: string
- name: ConnectionReferenceDisplayNamePattern
  type: string
- name: ConnectionReferenceLogicalNamePattern
  type: string
- name: Branch
  type: string
- name: TargetBranch
  type: string
  default: 'refs/heads/qa'

steps:
# Init git
- script: |
   git config user.email "$(Build.RequestedForEmail)"
   git config user.name "$(Build.RequestedFor)"
   git checkout origin/${{parameters.Branch}} --track
  workingDirectory: $(Build.SourcesDirectory)\$(Build.Repository.Name)
  displayName: 'Initialize Git'

- task: PowerPlatformToolInstaller@2
  inputs:
    DefaultVersion: true

# Use set-connection-variables task to get values from AzDO Service Connection to be used in scripts that don't use tasks
- task: PowerPlatformSetConnectionVariables@2
  displayName: 'Set Connection Variables'
  name: connectionVariables
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: ${{parameters.DevServiceConnectionName}}
    Environment: ${{parameters.DevServiceConnectionURL}}

- template: set-spn-token.yml
  parameters:
    dynamicsUrl: ${{parameters.DevServiceConnectionURL}}
    tenantId: $(connectionVariables.BuildTools.TenantId)
    clientId: $(connectionVariables.BuildTools.ApplicationId)
    clientSecret: $(connectionVariables.BuildTools.ClientSecret)

# Merge solution
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/merge-solution.ps1"
    try {
        Merge-Solution "$env:MAPPED_SPN_Token" "${{parameters.DevServiceConnectionURL}}" "${{parameters.SolutionName}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while merging solution."
        Write-Host $_
        exit 1;
    }
  displayName: 'Merge Solution Patches'
  condition: and(succeeded(), ${{parameters.MergeSolutionBeforeExport}})
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Solution Name
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-solution-name.ps1"
    try {
        Test-SolutionName "$env:MAPPED_SPN_Token" "${{parameters.DevServiceConnectionURL}}" "${{parameters.SolutionName}}" "${{parameters.ApprovedSolutionNames}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking solution name."
        Write-Host $_
        exit 1;
    }
  displayName: 'Check Solution Name Pattern'
  condition: and(succeeded(), ${{parameters.CheckSolutionNamePattern}})
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Solution Publisher
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-publisher-name.ps1"
    try {
        Test-PublisherPrefix "$env:MAPPED_SPN_Token" "${{parameters.DevServiceConnectionURL}}" "${{parameters.SolutionName}}" "kcs"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking solution publisher."
        Write-Host $_
        exit 1;
    }
  displayName: 'Check Solution Publisher'
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Connection Reference
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-connection-references.ps1"
    try {
        Test-ConnectionReferences "$env:MAPPED_SPN_Token" "${{parameters.DevServiceConnectionURL}}" "${{parameters.SolutionName}}" "${{parameters.ConnectionReferenceDisplayNamePattern}}" "${{parameters.ConnectionReferenceLogicalNamePattern}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking connection references."
        Write-Host $_
        exit 1;
    }
  displayName: 'Check Connection References'
  condition: and(succeeded(), ${{parameters.CheckConnectionReferences}})
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Solution Components
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-allowed-solution-components.ps1"
    try {
        Test-AllowedSolutionComponents "$env:MAPPED_SPN_Token" "${{parameters.DevServiceConnectionURL}}" "${{parameters.SolutionName}}" "${{parameters.AllowedSolutionComponentTypes}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking solution components."
        Write-Host $_
        exit 1;
    }
  displayName: 'Check Solution Components'
  condition: and(succeeded(), ${{parameters.CheckSolutionComponentTypes}})
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Table Behavior
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-table-behavior.ps1"
    try {
        Test-TableBehavior "${{parameters.DevServiceConnectionURL}}" "$env:MAPPED_SPN_Token" "${{parameters.SolutionName}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking table behavior."
        Write-Host $_
        exit 1;
    }
  displayName: 'Check Table Behavior'
  condition: and(succeeded(), ${{parameters.CheckTableBehavior}})
  env:
   MAPPED_SPN_Token: $(SpnToken)

- task: PowerPlatformPublishCustomizations@2
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: ${{parameters.DevServiceConnectionName}}
    AsyncOperation: true
    MaxAsyncWaitTime: '120'

- task: PowerPlatformExportSolution@2
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: ${{parameters.DevServiceConnectionName}}
    SolutionName: '${{parameters.SolutionName}}'
    SolutionOutputFile: '$(Build.Repository.LocalPath)\${{parameters.SolutionName}}\${{parameters.SolutionName}}_unmanaged.zip'
    AsyncOperation: true
    MaxAsyncWaitTime: '120'

- task: PowerPlatformUnpackSolution@2
  inputs:
    SolutionInputFile: '$(Build.Repository.LocalPath)\${{parameters.SolutionName}}\${{parameters.SolutionName}}_unmanaged.zip'
    SolutionTargetFolder: '$(Build.SourcesDirectory)\$(Build.Repository.Name)\${{parameters.SolutionName}}'

- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/environment-variables.ps1"
    try {
        Check-NewEnvironmentVariables "${{parameters.SolutionName}}" "$(Build.Repository.Name)"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while processing new environment variables."
        Write-Host $_
        exit 1;
    }
  displayName: 'Check Environment Variables'
  condition: and(succeeded(), ${{parameters.CheckEnvironmentVariables}})

- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/environment-variables.ps1"
    try {
        Remove-EnvironmentVariablesValues "${{parameters.SolutionName}}" "$(Build.Repository.Name)"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while deleting environment variables values."
        Write-Host $_
        exit 1;
    }
  displayName: 'Remove Environment Variable values'
  condition: and(succeeded(), ${{parameters.CheckEnvironmentVariables}})

- script: |
   git config user.email "$(Build.RequestedForEmail)"
   git config user.name "$(Build.RequestedFor)"
   git add --all
   git commit -m "Build requested by $(Build.RequestedFor)"
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
  workingDirectory: $(Build.SourcesDirectory)\$(Build.Repository.Name)
  displayName: 'Commit changes'

 # add Azure DevOps extension
- script: az extension add -n azure-devops
  displayName: 'Install Azure DevOps Extension'
  condition: and(succeeded(), eq('${{parameters.ApprovalType}}', 'PullRequest'))

  # Set default org and project
- powershell: az devops configure --defaults organization=$(System.CollectionUri) project="$(System.TeamProject)"
  env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  displayName: 'Set az devops defaults'
  condition: and(succeeded(), eq('${{parameters.ApprovalType}}', 'PullRequest'))

  # Create Pull Requests
- powershell: az repos pr create --repository "$(Build.Repository.Name)" --source-branch 'refs/heads/dev' --delete-source-branch $false --auto-complete $false --target-branch '${{parameters.TargetBranch}}' --reviewers="$(Build.RequestedForEmail)" --title "Build requested for $(Build.RequestedFor)"
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  displayName: 'Create PR - dev to ${{parameters.TargetBranch}}'
  condition: and(succeeded(), eq('${{parameters.ApprovalType}}', 'PullRequest'))