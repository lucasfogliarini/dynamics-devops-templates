parameters:
- name: SolutionName
  type: string
- name: MergeSolutionBeforeExport
  type: boolean
  default: true
- name: AllowedSolutionComponentTypes
  type: string
- name: Repo
  type: string
- name: Branch
  type: string

steps:
# Init git
- script: |
   git config user.email "$(Build.RequestedForEmail)"
   git config user.name "$(Build.RequestedFor)"
   git checkout origin/${{parameters.Branch}} --track
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  displayName: 'Initialize Git'

- task: PowerPlatformToolInstaller@2
  inputs:
    DefaultVersion: true

# Use set-connection-variables task to get values from AzDO Service Connection to be used in scripts that don't use tasks
- task: PowerPlatformSetConnectionVariables@2
  displayName: 'Set Connection Variables'
  name: connectionVariables
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: 'kroton-dev-core'
    Environment: 'https://kroton-dev-core.crm2.dynamics.com'

- template: set-spn-token.yml
  parameters:
    dynamicsUrl: 'https://kroton-dev-core.crm2.dynamics.com'
    tenantId: $(connectionVariables.BuildTools.TenantId)
    clientId: $(connectionVariables.BuildTools.ApplicationId)
    clientSecret: $(connectionVariables.BuildTools.ClientSecret)

# Merge solution
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/merge-solution.ps1"
    try {
        Merge-Solution "$env:MAPPED_SPN_Token" "kroton-dev-core.crm2.dynamics.com" "${{parameters.SolutionName}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while merging solution."
        Write-Host $_
        exit 1;
    }
  displayName: 'Merge Solution Patches'
  condition: and(succeeded(), ${{parameters.MergeSolutionBeforeExport}})
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Solution Name
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-solution-name.ps1"
    try {
        Test-SolutionName "$env:MAPPED_SPN_Token" "kroton-dev-core.crm2.dynamics.com" "${{parameters.SolutionName}}" "^(Contact Core|Incident Core)"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking solution name."
        Write-Host $_
        exit 1;
    }
  displayName: 'Test Solution Name Pattern'
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Solution Publisher
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-publisher-name.ps1"
    try {
        Test-PublisherPrefix "$env:MAPPED_SPN_Token" "kroton-dev-core.crm2.dynamics.com" "${{parameters.SolutionName}}" "kcs"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking solution publisher."
        Write-Host $_
        exit 1;
    }
  displayName: 'Test Solution Publisher'
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Connection Reference
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-connection-references.ps1"
    try {
        Test-ConnectionReferences "$env:MAPPED_SPN_Token" "kroton-dev-core.crm2.dynamics.com" "${{parameters.SolutionName}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking connection references."
        Write-Host $_
        exit 1;
    }
  displayName: 'Check Connection References'
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Solution Components
#- powershell: |
#    # load PowerShell files into memory
#    . "$env:POWERSHELLPATH/check-allowed-solution-components.ps1"
#    try {
#        Test-AllowedSolutionComponents "$env:MAPPED_SPN_Token" "krotondev.crm2.dynamics.com" "${{parameters.SolutionName}}" "${{parameters.AllowedSolutionComponentTypes}}"
#    } catch {
#        Write-Host "##vso[task.logissue type=warning]Error occurred while checking solution components."
#        Write-Host $_
#        exit 1;
#    }
#  displayName: 'Check Allowed Solution Components'
#  env:
#   MAPPED_SPN_Token: $(SpnToken)

- task: PowerPlatformPublishCustomizations@2
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: 'kroton-dev-core'
    AsyncOperation: true
    MaxAsyncWaitTime: '120'

- task: PowerPlatformExportSolution@2
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: 'kroton-dev-core'
    SolutionName: '${{parameters.SolutionName}}'
    SolutionOutputFile: '$(Build.Repository.LocalPath)\${{parameters.SolutionName}}\${{parameters.SolutionName}}_unmanaged.zip'
    AsyncOperation: true
    MaxAsyncWaitTime: '120'

- task: PowerPlatformUnpackSolution@2
  inputs:
    SolutionInputFile: '$(Build.Repository.LocalPath)\${{parameters.SolutionName}}\${{parameters.SolutionName}}_unmanaged.zip'
    SolutionTargetFolder: '$(Build.SourcesDirectory)\${{parameters.Repo}}\${{parameters.SolutionName}}'

- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/environment-variables.ps1"
    try {
        Check-NewEnvironmentVariables "${{parameters.SolutionName}}" "${{parameters.Repo}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while processing new environment variables."
        Write-Host $_
        exit 1;
    }
  displayName: 'Check new Environment Variables'

- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/environment-variables.ps1"
    try {
        Remove-EnvironmentVariablesValues "${{parameters.SolutionName}}" "${{parameters.Repo}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while deleting environment variables values."
        Write-Host $_
        exit 1;
    }
  displayName: 'Remove Environment Variable values'

- script: |
   git config user.email "$(Build.RequestedForEmail)"
   git config user.name "$(Build.RequestedFor)"
   git add --all
   git commit -m "Build requested by $(Build.RequestedFor)"
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
  workingDirectory: $(Build.SourcesDirectory)\${{parameters.Repo}}
  displayName: 'Commit changes'

# Create PR for QA branch.
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/create-pull-request.ps1"
    try {
        Add-PullRequest "Dynamics%20Core" "${{parameters.Repo}}" "refs/heads/${{parameters.Branch}}" "refs/heads/qa" "$(System.AccessToken)"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while creating a pull request."
        Write-Host $_
        exit 1;
    }
  displayName: 'Create a new PR for QA branch.'
  env:
   MAPPED_SPN_Token: $(SpnToken)