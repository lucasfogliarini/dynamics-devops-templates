parameters:
- name: SolutionName
  type: string
- name: DevServiceConnectionName
  type: string
- name: DevServiceConnectionURL
  type: string
- name: PublisherPrefix
  type: string
  default: 'kcs'
- name: ConnectionReferenceDisplayNamePattern
  type: string
- name: ConnectionReferenceLogicalNamePattern
  type: string

steps:

- task: PowerPlatformToolInstaller@2
  inputs:
    DefaultVersion: true

# Use set-connection-variables task to get values from AzDO Service Connection to be used in scripts that don't use tasks
- task: PowerPlatformSetConnectionVariables@2
  displayName: 'Set Connection Variables'
  name: connectionVariables
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: ${{parameters.DevServiceConnectionName}}
    Environment: ${{parameters.DevServiceConnectionURL}}

- template: set-spn-token.yml
  parameters:
    dynamicsUrl: ${{parameters.DevServiceConnectionURL}}
    tenantId: $(connectionVariables.BuildTools.TenantId)
    clientId: $(connectionVariables.BuildTools.ApplicationId)
    clientSecret: $(connectionVariables.BuildTools.ClientSecret)

# Check Solution Name
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-solution-name.ps1"
    try {
        Test-SolutionName "$env:MAPPED_SPN_Token" "${{parameters.DevServiceConnectionURL}}" "${{parameters.SolutionName}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking solution name."
        Write-Host $_
        exit 1;
    }
  displayName: 'Test Solution Name Pattern'
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Solution Publisher
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-publisher-name.ps1"
    try {
        Test-PublisherPrefix "$env:MAPPED_SPN_Token" "${{parameters.DevServiceConnectionURL}}" "${{parameters.SolutionName}}" "${{parameters.PublisherPrefix}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking solution publisher."
        Write-Host $_
        exit 1;
    }
  displayName: 'Test Solution Publisher'
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Connection Reference
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-connection-references.ps1"
    try {
        Test-ConnectionReferences "$env:MAPPED_SPN_Token" "${{parameters.DevServiceConnectionURL}}" "${{parameters.SolutionName}}" "${{parameters.ConnectionReferenceDisplayNamePattern}}" "${{parameters.ConnectionReferenceLogicalNamePattern}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking connection references."
        Write-Host $_
        exit 1;
    }
  displayName: 'Test Connection References'
  env:
   MAPPED_SPN_Token: $(SpnToken)

# Check Hotfix Components
- powershell: |
    # load PowerShell files into memory
    . "$env:POWERSHELLPATH/check-hotfix-components.ps1"
    try {
        Test-Hotfix-Components "${{parameters.DevServiceConnectionURL}}" "$env:MAPPED_SPN_Token" "${{parameters.SolutionName}}"
    } catch {
        Write-Host "##vso[task.logissue type=warning]Error occurred while checking solution components."
        Write-Host $_
        exit 1;
    }
  displayName: 'Check Hotfix Components'
  env:
   MAPPED_SPN_Token: $(SpnToken)

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@2
  displayName: 'Power Platform Publish Customizations '
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: ${{parameters.DevServiceConnectionName}}
    Environment: ${{parameters.DevServiceConnectionURL}}

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@2
  displayName: 'Power Platform Export Solution '
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: ${{parameters.DevServiceConnectionName}}
    Environment: ${{parameters.DevServiceConnectionURL}}
    SolutionName: "${{parameters.SolutionName}}"
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)/hotfix.zip'
    Managed: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'